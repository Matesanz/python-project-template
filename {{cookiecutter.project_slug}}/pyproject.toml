[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "0.1.0"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.author_email}}>"]
readme = "README.md"
packages = [{include = "{{cookiecutter.pkg_name}}"}]

[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"

[tool.poetry.group.dev.dependencies]
flake8 = "^5.0.4"
black = "^22.8.0"
pre-commit = "^2.20.0"
commitizen = "^2.32.2"
bandit = "^1.7.4"
autoflake = "^1.5.3"
isort = "^5.10.1"
pydocstyle = "^6.1.1"
mkdocs = "^1.3.1"
mkdocstrings = "^0.19.0"
mkdocstrings-python = "^0.7.1"
mkdocs-material = "^8.4.2"
pytest = "^7.1.3"
jupyter = "^1.0.0"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "$version"

[tool.black]
line_length = 100
max-complexity = 10

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
extend_skip_glob = ["docs/*", "notebooks/*"]

[tool.autoflake]
check = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D200", "D212"]


[tool.pylint]
    [tool.pylint.main]
    load-plugins=[
        "pylint.extensions.check_elif",
        "pylint.extensions.bad_builtin",
        "pylint.extensions.docparams",
        "pylint.extensions.for_any_all",
        "pylint.extensions.set_membership",
        "pylint.extensions.code_style",
        "pylint.extensions.overlapping_exceptions",
        "pylint.extensions.typing",
        "pylint.extensions.redefined_variable_type",
        "pylint.extensions.comparison_placement",
    ]


[tool.bandit]
exclude_dirs = ["tests"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
